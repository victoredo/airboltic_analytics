name: Continous Integration & Deployment
permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  S3_PARENT_DOCS_BUCKET: s3://${{ vars.AWS_DOC_BUCKET }}/${{ github.repository }}/main
  AWS_CREDENTIALS_REGION: eu-west-1
  AWS_CREDENTIALS_ROLE_DURATION: 1800
  AWS_CREDENTIALS_ROLE_SESSION_NAME: boltGitHubActionsDeployment


jobs:
  setup-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Activate poetry
        uses: ./.github/actions/activate_poetry

  build-databricks:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Activate poetry
        uses: ./.github/actions/poetry

      - name: Configure AWS credentials - dbt
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_CREDENTIALS_REGION }}
          role-to-assume: arn:aws:iam::bolt:role/bolt-role
          role-duration-seconds: ${{ env.AWS_CREDENTIALS_ROLE_DURATION }}
          role-session-name: ${{ env.AWS_CREDENTIALS_ROLE_SESSION_NAME }}

      - name: Get dbt service account credentials
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            DBX_ID,bolt/global/boltsp-client-id
            DBX_SECRET,bolt/global/boltsp
        
      - name: CI/CD
        env:
          DBT_TARGET: ${{ github.event_name == 'pull_request' && 'dev' || 'prod' }}
        uses: ./.github/actions/dbt_core_ci_cd
        with:
          s3-artifacts-dir: '${{ env.S3_PARENT_DOCS_BUCKET }}/databricks'
          s3-region: ${{ env.AWS_CREDENTIALS_REGION }}
          role-to-assume: ${{ vars.AWS_IAM_ROLE_ARN }}

 